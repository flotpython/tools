# -*- coding: utf-8 -*-
############################################################ 
#
# Corrigés de la semaine 6
#
############################################################

##################################################
# regexp_pythonid - Semaine 6 Séquence 6
##################################################
# un identificateur commence par une lettre ou un underscore
# et peut être suivi par n'importe quel nombre de
# lettre, chiffre ou underscore, ce qui se trouve être \w
# si on ne se met pas en mode unicode
regexp_pythonid = "[a-zA-Z_]\w*"


##################################################
# regexp_pythonid (v2) - Semaine 6 Séquence 6
##################################################
# on peut aussi bien sûr l'écrire en clair
regexp_pythonid2 = "[a-zA-Z_][a-zA-Z0-9_]*"


##################################################
# regexp_specials - Semaine 6 Séquence 6
##################################################
# il faut commencer par exactement 2 underscores
# donc le caractère suivant doit être une lettre
# ensuite on peut mettre ce qu'on veut comme alphanumérique,
# mais avant les deux derniers underscores on ne peut pas avoir
# un underscore
# enfin pour traiter le cas où la partie centrale est réduite
# à un seul caractère, on met une option - avec ()? 
regexp_specials = "__[a-zA-Z](\w*[a-zA-Z0-9])?__"


##################################################
# regexp_url - Semaine 6 Séquence 6
##################################################
# en ignorant la casse on pourra ne mentionner les noms de protocoles
# qu'en minuscules
i_flag = "(?i)"

# pour élaborer la chaine (proto1|proto2|...)
protos_list = ['http', 'https', 'ftp', 'ssh', ] 
protos      = "(?P<proto>" + "|".join(protos_list) + ")"

# à l'intérieur de la zone 'user/password', la partie
# password est optionnelle - mais on ne veut pas le ':' dans
# le groupe 'password' - il nous faut deux groupes
password    = r"(:(?P<password>[^:]+))?"

# la partie user-password elle-même est optionnelle
user        = r"((?P<user>\w+){password}@)?".format(**locals())

# pour le hostname on accepte des lettres, chiffres, underscore et '.'
# attention à backslaher . car sinon ceci va matcher tout y compris /
hostname    = r"(?P<hostname>[\w\.]+)"

# le port est optionnel
port        = r"(:(?P<port>\d+))?"

# après le premier slash
path        = r"(?P<path>.*)"

# on assemble le tout
regexp_url = i_flag + protos + "://" + user + hostname + port + '/' + path

