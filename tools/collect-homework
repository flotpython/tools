# Description: a script to manage a git repository with one folder per student
#
# User files:
# 00.ids: where to store the students ids and reponames
# 00.reponame (optional): how the student repo is supposed to be named
#
# Workflow:
#
# 1. ask each student to create a github repo named like e.g. pe-homework
#    ususally repo should be private (so students can't see each other's work),
#    they invite you as a collaborator
# 2. beware to accept their invitation in a timely manner, as a github
#    invitation expires after a few days
# 3. create a fresh folder, named after the target reponame
#    so typically you could put all this in a folder
#    $HOME/git/ue12-p23-numerique/pe-homework
#    alternately, if this convention does not suit you, you can instead
#    create a file named `00.reponame` containing the name of the repo (e.g. pe-homework)
#    this will be used to locate the student repos to be cloned
# 4. as you receive invitations, add them to a file named 00.ids
#    you can use '#' for comments in that file
# 5. run this script to clone all the repos with
#    collect-homework clone
#    this can be done several times, the existing folders will be skipped
#    so only the missing students are tried again
# 6. if a student has misspelled their repo name, you can edit 00.ids
#    and add the correct repo name after the id, separated by a space or a /
#    this will take precedence over the default reponame (pe-homework in our example)
# 7. iterate until you have all the ids and all the repos cloned
#
#    in the meanwhile, you can use all the functions below
#
#
# Usage:
#
# each function in this script can be called from the command line
# e.g. (read through the file for more details)
# collect-homework clone      will clone all repos
# collect-homework summary    will output a summary of all repos (nb of commits, last commit date, ...)
# collect-homework ids        will output all ids on stdout
# collect-homework repos      will output all ids on stdout
# collect-homework fetch      will fetch all repos
# collect-homework pull       will pull all repos
# collect-homework log1       will show the (full) last commit of each repo
# collect-homework l1         will show the last commit of each repo (one line per commit)
# collect-homework ln 4       same on the 4 last commits of each repo
# collect-homework missing    will output the folders missing
#                             i.e. students that have not yet created their repo
# collect-homework oldies     will output the folders present but that are no longer in 00.ids
#                             i.e. students that have switched to another group
# ... read the script for more functions
#
#
# Format for 00.ids:
#
# 00.ids is supposed to contain, one per line, the github ids of the students
# it can contain comments, starting with a #
# for each student you can use any of the following formats
#
# https://github.com/student/repo
# student/repo
# student repo
# student
#
# when the repo is not provided, it is assumed to be
#   either the content of 00.reponame if that file exists
#   otherwise the name of the current folder


# get standardized github repo name (like e.g. pe-homework)
# for the name of the current folder
# unless you need to overwrite it
if [ -f 00.reponame ]; then
    REPONAME=$(cat 00.reponame)
else
    REPONAME=$(basename $(pwd -P))
fi

# the github ids of all the students
function preprocess() {
    cat 00.ids \
  | sed -e 's|^https://github.com/||' \
  | sed -e 's/#.*//' \
  | sed -e "s,/, ,g" \
  | grep -v '^[ \t]*$'
}
IDS=$(preprocess | awk '{print $1}')
ID_REPOS=$(preprocess | awk '{print $1":"$2}')

# all these are considered as belonging to students
DIRS=$(find . -depth 1 -type d)

# students that have switched to another group
function oldies() {
    for d in $DIRS; do
        echo $IDS | grep -q $d || { echo OLDY $d; }
    done
}

function ids() {
    echo $IDS
}
function repos() {
    for id_repo in $ID_REPOS; do
        local id=$(echo $id_repo | cut -d: -f1)
        local repo=$(echo $id_repo | cut -d: -f2)
        [[ -z $repo ]] && repo=$REPONAME
        echo $id/$repo
    done
}

# a rather fancy summary, shows the ones missing, the ones empty, and so on
function summary() {
    local nb_ids=$(echo $IDS | wc -w)
    echo we have $nb_ids ids
    local counter=0
    for id in $IDS; do
        [[ -d $id ]] || { printf '%27s ' $id; echo MISSING; continue; }
        git -C $id log >& /dev/null || { printf '%27s ' $id; echo EMPTY; continue; }
        counter=$(($counter + 1))
        printf '%02d ' $counter
        printf '%24s ' $id
        local nb_folders=$(find $id -type d | fgrep -v '/.git/' | wc -l)
        local nb_files=$(find $id -type f | fgrep -v '/.git/' | wc -l)
        local nb_git_files=$(git -C $id ls-files | wc -l)
        local nb_commits=$(git -C $id log --oneline | wc -l)
        local dateh=$(git -C $id log -1 --format='%ah')
        local date=$(git -C $id log -1 --format='%ar')
        printf "%2d folders - " $nb_folders
        printf "%3d files - " $nb_files
        printf "%3d git files - " $nb_git_files
        printf "%3d commits - " $nb_commits
        printf "last on %s (%s)" "$dateh" "$date"
        echo
    done
    echo we have $counter actual ids
}

# how many do we even know about ?
function how-many() {
    echo we have $(wc -w <<< $IDS) known ids
}

# which ones are missing
function missing() {
    for id in $IDS; do
        [[ -d $id ]] || { echo MISSING $id; continue; }
        git -C $id log >& /dev/null || { echo EMPTY $id; continue; }
    done
}

function clone() {
    for id_repo in $ID_REPOS; do
        local id=$(echo $id_repo | cut -d: -f1)
        local repo=$(echo $id_repo | cut -d: -f2)
        [[ -z $repo ]] && repo=$REPONAME
        [ -d $id ] && { echo $id OK; continue; }
        echo cloning into $id from repo $repo
        git clone git@github.com:$id/$repo.git $id
    done
}

function -git-proxy() {
    local message="$1"; shift
    for d in $DIRS; do
        # ignoring non-git folders
        [[ -d "$d/.git" ]] || { 1>&2 echo ignoring non-git folder $d; continue; }
        [[ -n "$message" ]] && echo ===== $message in $d
        git -C $d "$@"
    done
}

function urls() { -git-proxy "" remote get-url origin; }
function log1() { -git-proxy "last commit" log -1; }
function l1() { -git-proxy "" log -1 --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(dim bold red)%an%C(reset) - %s%C(red)%d%C(reset)'; }
function l5() { -git-proxy "LISTING 5" log --oneline --all --graph -5 --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(dim bold red)%an%C(reset) - %s%C(red)%d%C(reset)'; }
function ln() { local nlines="$1"; shift; -git-proxy "LISTING $nlines" log --oneline --all --graph -$nlines --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(dim bold red)%an%C(reset) - %s%C(red)%d%C(reset)'; }
function status() { -git-proxy "STATUS" status; }
function fetch() { -git-proxy "FETCHING" fetch --all; }
function pull() { -git-proxy "pulling" pull; }
function reset() { -git-proxy "resetting-hard" reset --hard; }
function merge() { -git-proxy "merging" merge origin/main; }

## this is specific to the python course
## keeping it here for now, will need to provide
## some sort of plugin mechanism some day..

function -spot-and-run() {
    local pattern="$1"; shift
    local run="$1"; shift
    for id in $IDS; do
        echo -n ===== $id
        local found=$(find $id -name "$pattern")
        if [ -z "$found" ]; then
            echo MISSING pattern "$pattern"
            continue
        fi
        if [ -z "$run" ]; then
            echo FOUND pattern "$pattern" = $found
            continue
        fi
        echo RUNNING $found
        python $found
    done
}
function missing-snake() { -spot-and-run 'snake*.py'; }
function run-snake() { -spot-and-run 'snake*.py' run; }

function main() {
    local students=""
    while getopts "s:" opt; do
        case $opt in
            s)
                students="$students $(sed -e s'|/||' -e s'|,| |' <<< "$OPTARG")"
                ;;
        esac
    done
    shift $((OPTIND-1))
    if [[ -n "$students" ]]; then
        IDS=$(echo $students)
        DIRS=$(find $IDS -depth 0 -type d)
        echo using DIRS=$DIRS
    fi
    # call the function
    echo "calling $@"
    "$@"
}

HOWTO="
  fill in your students in 00.ids
    with one of the following formats:
      githubid
      githubid/reponame
      https://github.com/githubid/reponame
    comments start with a #
  if reponame is not provided, then it is assumed to be
     either the content of 00.reponame if it exists
     or the name of the current folder
you can then use
  Usage: $0 <command>
with <command> among the following :
  clone
  summary
  missing
  fetch or pull
  log1 or log5
  urls or status or reset or merge
  ...
do 'less $(type -p $0)' to read the script for more functions
"

if [[ -z "$@" ]]; then
    echo "$HOWTO"
else
    main "$@"
fi
